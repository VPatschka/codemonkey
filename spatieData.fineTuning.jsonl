{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\n\nclass DetailSectionDTO extends Data\n{\n    public function __construct(\n        public string $title,\n        public DetailSectionType $sectionType,\n    ) {\n    }\n}","role":"user"},{"content":"{\n  \"DetailSection\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"SectionType\": {\n        \"$ref\": \"#/components/schemas/DetailSectionType\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nenum DetailSectionType: string\n{\n    case Evidence = 'evidence';\n    case List = 'list';\n    case Grid = 'grid';\n}","role":"user"},{"content":"{\n  \"DetailSectionType\": {\n    \"type\": \"string\",\n    \"enum\": [\n      \"evidence\",\n      \"list\",\n      \"grid\"\n    ]\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Optional;\n\nclass EvidenceDetailSectionDTO extends DetailSectionDTO\n{\n    public function __construct(\n        public string $title,\n        public EvidenceType $evidenceType,\n        public string|Optional $description,\n        public DetailSectionType $sectionType = DetailSectionType::Evidence,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}","role":"user"},{"content":"{\n  \"EvidenceDetailSection\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"EvidenceType\": {\n        \"$ref\": \"#/components/schemas/EvidenceType\"\n      },\n      \"Description\": {\n        \"type\": \"string\",\n        \"nullable\": true\n      },\n      \"SectionType\": {\n        \"$ref\": \"#/components/schemas/DetailSectionType\",\n        \"nullable\": true\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends DetailSectionDTO\n{\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"{\n  \"GridDetailSection\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"Items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/GridItemDTO\"\n        }\n      },\n      \"SectionType\": {\n        \"$ref\": \"#/components/schemas/DetailSectionType\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\Taxonomy;\nuse Spatie\\LaravelData\\Data;\n\nclass GridItemDTO extends Data\n{\n    public function __construct(\n        public string $title,\n        public bool $isInResume,\n        public bool $isInJob,\n    ) {\n    }\n\n    public static function fromTaxonomy(Taxonomy $taxonomy, bool $isResumeOrigin): self\n    {\n        return new self(\n            $taxonomy->name,\n            $taxonomy->matched || $isResumeOrigin,\n            $taxonomy->matched || !$isResumeOrigin,\n        );\n    }\n}","role":"user"},{"content":"{\n  \"GridItem\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"IsInResume\": {\n        \"type\": \"boolean\"\n      },\n      \"IsInJob\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\BaseScoreDataItem;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\JobTitleFound;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\JobTitlesScoreDataItem;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\ScoreDataItem;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\SkillFound;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\SkillsScoreDataItem;\nuse Illuminate\\Support\\Str;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass ListDetailSectionDTO extends DetailSectionDTO\n{\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(ListItemDTO::class)]\n        public DataCollection $items,\n        public DetailSectionType $sectionType = DetailSectionType::List,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}","role":"user"},{"content":"{\n  \"ListDetailSection\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"Items\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/ListItem\"\n        }\n      },\n      \"SectionType\": {\n        \"$ref\": \"#/components/schemas/DetailSectionType\"\n      }\n    },\n    \"required\": [\n      \"Title\",\n      \"Items\",\n      \"SectionType\"\n    ],\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\n\nclass ListItemDTO extends Data\n{\n    public function __construct(\n        public string $title,\n        public bool $isPositive,\n    ) {\n    }\n}","role":"user"},{"content":"{\n  \"ListItem\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Title\": {\n        \"type\": \"string\"\n      },\n      \"IsPositive\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\EnrichedScoreData;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\MatchData;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass MatchingSummaryDTO extends Data\n{\n    public function __construct(\n        public int $score,\n        #[DataCollectionOf(SectionDTO::class)]\n        public DataCollection $sections,\n        #[DataCollectionOf(SectionDTO::class)]\n        public DataCollection $reverseSections\n    ) {\n    }\n}","role":"user"},{"content":"{\n  \"MatchingSummary\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"Score\": {\n        \"type\": \"integer\"\n      },\n      \"Sections\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Section\"\n        }\n      },\n      \"ReverseSections\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/Section\"\n        }\n      }\n    },\n    \"additionalProperties\": false\n  }\n}","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\BaseScoreDataItem;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\Evidence;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\EvidenceType;\nuse App\\Libraries\\Sovren\\DataTransferObjects\\Matching\\Fragments\\ScoreDataItem;\nuse Illuminate\\Support\\Str;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass SectionDTO extends Data\n{\n    public function __construct(\n        public SectionType $type,\n        public string $title,\n        public float $score,\n        public string $summary,\n        #[DataCollectionOf(DetailSectionDTO::class)]\n        public DataCollection $detailSections,\n    ) {\n    }\n}","role":"user"},{"content":"```json\n\"Section\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"Type\": {\n      \"$ref\": \"#/components/schemas/SectionType\"\n    },\n    \"Title\": {\n      \"type\": \"string\"\n    },\n    \"Score\": {\n      \"type\": \"number\"\n    },\n    \"Summary\": {\n      \"type\": \"string\"\n    },\n    \"DetailSections\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/components/schemas/DetailSection\"\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n```","role":"assistant"}]}
{"messages":[{"content":"You are expert programmer and software architect.\nYour current task is to take source data and convert it into code in target language using user-defined template for generated classes.\n\nGenerate one class at a time when user asks you too.\nBe as precise as you can to the source material when generating the code.\nUse best practices like SOLID, KISS, etc.\nAll generated files will be in the same directory, so you don't have to \"use\" them.\nAlways use concrete types, when you have to use \"array\" put type into decorator, attribute or comment.\n\nWhen you don't have source data or template you will ask for them.\n\nReturn just valid code, with no additional explanation and information.\nDon't add marks like ``` or ```php to your code.\n\nNO EXPLANATION. JUST CODE. NO EXPLANATORY COMMENTS. ONE CLASS AT A TIME.\n","role":"system"},{"content":"Create PHP files from Sovren swagger schemas","role":"user"},{"content":"Use included code at the end as a template.\nThis template is one class in one file - you'll also generate just one class in one response.\n\nAssume that all files are in same directory. Don't include use statements for property types.All fields should start with lowercase letter.\nDon' include ``` and ```php marks!\nUse type array for simple types like \"string\", \"int\", etc. otherwise use DataCollection.\nDon' use default values for properties, not even null. When property is nullable add \"Optional\" class to property type union.\nDefine all properties in constructor.\nIf the source template is of enum type, do not use template, but create PHP enum datatype with data from 'enum' field.\nUse valid PHP types, string[] is not valid type.\n<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nuse Spatie\\LaravelData\\Data;\nuse Spatie\\LaravelData\\Attributes\\DataCollectionOf;\nuse Spatie\\LaravelData\\DataCollection;\n\nclass GridDetailSectionDTO extends Data\n{\n    /**\n     * @param string $title\n     * @param DataCollection<GridItemDTO> $items\n     * @param array<string> $stringFields\n     * @param DetailSectionType $sectionType\n     */\n    public function __construct(\n        public string $title,\n        #[DataCollectionOf(GridItemDTO::class)]\n        public DataCollection $items,\n        public array $stringFields, // for string[] use array!!!\n        public DetailSectionType $sectionType = DetailSectionType::Grid,\n    ) {\n        parent::__construct($title, $sectionType);\n    }\n}\n","role":"user"},{"content":"<?php\n\nnamespace App\\DataTransferObjects\\Candidates\\Matching;\n\nenum SectionType: string\n{\n    case Skills = 'skills';\n    case JobTitles = 'jobTitles';\n    case Education = 'education';\n    case Industries = 'industries';\n    case Management = 'managementLevel';\n    case Certifications = 'certifications';\n    case Languages = 'languages';\n    case ExecutiveType = 'executiveType';\n}\n","role":"user"},{"content":"{\n  \"SectionType\": {\n    \"type\": \"string\",\n    \"enum\": [\n      \"skills\",\n      \"jobTitles\",\n      \"education\",\n      \"industries\",\n      \"managementLevel\",\n      \"certifications\",\n      \"languages\",\n      \"executiveType\"\n    ]\n  }\n}","role":"assistant"}]}